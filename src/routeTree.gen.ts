/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as OpenIncidentRouteRouteImport } from "./routes/openIncident/route";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as AdminDashboardRouteRouteImport } from "./routes/admin/dashboard/route";
import { Route as authSantinRouteRouteImport } from "./routes/(auth)/santin/route";
import { Route as authSantinLoginRouteImport } from "./routes/(auth)/santin/login";
import { ServerRoute as ApiTrpcSplatServerRouteImport } from "./routes/api/trpc/$";
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$";

const rootServerRouteImport = createServerRootRoute();

const OpenIncidentRouteRoute = OpenIncidentRouteRouteImport.update({
  id: "/openIncident",
  path: "/openIncident",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const AdminDashboardRouteRoute = AdminDashboardRouteRouteImport.update({
  id: "/admin/dashboard",
  path: "/admin/dashboard",
  getParentRoute: () => rootRouteImport,
} as any);
const authSantinRouteRoute = authSantinRouteRouteImport.update({
  id: "/(auth)/santin",
  path: "/santin",
  getParentRoute: () => rootRouteImport,
} as any);
const authSantinLoginRoute = authSantinLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => authSantinRouteRoute,
} as any);
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: "/api/trpc/$",
  path: "/api/trpc/$",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/openIncident": typeof OpenIncidentRouteRoute;
  "/santin": typeof authSantinRouteRouteWithChildren;
  "/admin/dashboard": typeof AdminDashboardRouteRoute;
  "/santin/login": typeof authSantinLoginRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/openIncident": typeof OpenIncidentRouteRoute;
  "/santin": typeof authSantinRouteRouteWithChildren;
  "/admin/dashboard": typeof AdminDashboardRouteRoute;
  "/santin/login": typeof authSantinLoginRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/openIncident": typeof OpenIncidentRouteRoute;
  "/(auth)/santin": typeof authSantinRouteRouteWithChildren;
  "/admin/dashboard": typeof AdminDashboardRouteRoute;
  "/(auth)/santin/login": typeof authSantinLoginRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/openIncident"
    | "/santin"
    | "/admin/dashboard"
    | "/santin/login";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/openIncident" | "/santin" | "/admin/dashboard" | "/santin/login";
  id:
    | "__root__"
    | "/"
    | "/openIncident"
    | "/(auth)/santin"
    | "/admin/dashboard"
    | "/(auth)/santin/login";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  OpenIncidentRouteRoute: typeof OpenIncidentRouteRoute;
  authSantinRouteRoute: typeof authSantinRouteRouteWithChildren;
  AdminDashboardRouteRoute: typeof AdminDashboardRouteRoute;
}
export interface FileServerRoutesByFullPath {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/trpc/$": typeof ApiTrpcSplatServerRoute;
}
export interface FileServerRoutesByTo {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/trpc/$": typeof ApiTrpcSplatServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/trpc/$": typeof ApiTrpcSplatServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths: "/api/auth/$" | "/api/trpc/$";
  fileServerRoutesByTo: FileServerRoutesByTo;
  to: "/api/auth/$" | "/api/trpc/$";
  id: "__root__" | "/api/auth/$" | "/api/trpc/$";
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/openIncident": {
      id: "/openIncident";
      path: "/openIncident";
      fullPath: "/openIncident";
      preLoaderRoute: typeof OpenIncidentRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/admin/dashboard": {
      id: "/admin/dashboard";
      path: "/admin/dashboard";
      fullPath: "/admin/dashboard";
      preLoaderRoute: typeof AdminDashboardRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth)/santin": {
      id: "/(auth)/santin";
      path: "/santin";
      fullPath: "/santin";
      preLoaderRoute: typeof authSantinRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth)/santin/login": {
      id: "/(auth)/santin/login";
      path: "/login";
      fullPath: "/santin/login";
      preLoaderRoute: typeof authSantinLoginRouteImport;
      parentRoute: typeof authSantinRouteRoute;
    };
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/trpc/$": {
      id: "/api/trpc/$";
      path: "/api/trpc/$";
      fullPath: "/api/trpc/$";
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface authSantinRouteRouteChildren {
  authSantinLoginRoute: typeof authSantinLoginRoute;
}

const authSantinRouteRouteChildren: authSantinRouteRouteChildren = {
  authSantinLoginRoute: authSantinLoginRoute,
};

const authSantinRouteRouteWithChildren = authSantinRouteRoute._addFileChildren(
  authSantinRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OpenIncidentRouteRoute: OpenIncidentRouteRoute,
  authSantinRouteRoute: authSantinRouteRouteWithChildren,
  AdminDashboardRouteRoute: AdminDashboardRouteRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
